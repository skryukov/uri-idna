# frozen_string_literal: true

require_relative "../lib/uri/idna/intranges"

class IDNAData
  SCRIPTS = %w[Greek Han Hebrew Hiragana Katakana].freeze

  BIDI_MAPPING = {
    "R" => "RTL",
    "AL" => "RTL",
    "L" => "L",
    "EN" => "EN",
    "AN" => "AN",
    "NSM" => "NSM",
    "ES" => "OTHER",
    "CS" => "OTHER",
    "ET" => "OTHER",
    "ON" => "OTHER",
    "BN" => "OTHER",
  }.freeze

  def initialize(ucdata)
    @ucdata = ucdata
    @data = prepare_data
  end

  attr_reader :ucdata

  include Enumerable

  def each
    yield "# frozen_string_literal: true\n\n"
    yield "# This file is automatically generated by bin/generate"
    yield "# Unicode version #{ucdata.version}\n\n"
    yield "module URI"
    yield "  module IDNA"

    yield "    UNICODE_VERSION = \"#{ucdata.version}\""

    scripts { |l| yield "    #{l}" }
    joining_types { |l| yield "    #{l}" }
    codepoint_classes { |l| yield "    #{l}" }
    initial_combiners { |l| yield "    #{l}" }
    virama_combining_classes { |l| yield "    #{l}" }
    bidi_classes { |l| yield "    #{l}" }

    yield "  end"
    yield "end"
  end

  private

  def initial_combiners(&block)
    yield "INITIAL_COMBINERS = ["
    optimised_list(@data[:combiners], &block)
    yield "].freeze"
  end

  def virama_combining_classes(&block)
    yield "VIRAMA_COMBINING_CLASSES = ["
    optimised_list(@data[:virama_combining_classes], &block)
    yield "].freeze"
  end

  def joining_types
    yield "JOINING_TYPES = {"
    ucdata.codepoints do |cp|
      yield "  0x#{cp.value.to_s(16)} => #{cp.joining_type.ord}," if cp.joining_type
    end
    yield "}.freeze"
  end

  def bidi_classes
    yield "BIDI_CLASSES = {"
    @data[:bidi_classes].each do |bidi_class, values|
      yield "  \"#{bidi_class}\" => ["
      optimised_list(values) { |l| yield "  #{l}" }
      yield "  ],"
    end
    yield "}.freeze"
  end

  def codepoint_classes
    yield "CODEPOINT_CLASSES = {"
    @data[:codepoint_classes].each do |status, values|
      yield "  \"#{status}\" => ["
      optimised_list(values) { |l| yield "  #{l}" }
      yield "  ],"
    end
    yield "}.freeze"
  end

  def scripts
    yield "SCRIPTS = {"
    SCRIPTS.each do |script|
      yield "  \"#{script}\" => ["
      optimised_list(ucdata.ucd_s[script]) { |l| yield "  #{l}" }
      yield "  ],"
    end
    yield "}.freeze"
  end

  def prepare_data
    data = { bidi_classes: {}, codepoint_classes: {}, combiners: [], virama_combining_classes: [] }
    ucdata.codepoints do |cp|
      bidi_class = BIDI_MAPPING[cp.bidi_class] || "UNUSED"
      data[:bidi_classes][bidi_class] ||= []
      data[:bidi_classes][bidi_class] << cp.value

      status = cp.idna2008_status
      unless %w[UNASSIGNED DISALLOWED].include?(status)
        data[:codepoint_classes][status] ||= []
        data[:codepoint_classes][status] << cp.value
      end

      data[:combiners] << cp.value if cp.general_category&.start_with?("M")

      data[:virama_combining_classes] << cp.value if cp.combining_class == "9"
    end

    data
  end

  def optimised_list(d)
    URI::IDNA::Intranges.from_list(d).each do |value|
      yield "  0x#{value.to_s(16)},"
    end
  end
end
