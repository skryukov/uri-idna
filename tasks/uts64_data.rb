# frozen_string_literal: true

class UTS64Data
  UTS46_STATUSES = {
    "valid" => ["V", false],
    "ignored" => ["I", false],
    "mapped" => ["M", true],
    "deviation" => ["D", true],
    "disallowed" => ["X", false],
    "disallowed_STD3_valid" => ["3", false],
    "disallowed_STD3_mapped" => ["3", true],
  }.freeze

  def initialize(ucdata)
    @ucdata = ucdata
  end

  attr_reader :ucdata

  include Enumerable

  def each
    yield "# frozen_string_literal: true\n\n"
    yield "# This file is automatically generated by bin/generate"
    yield "# Unicode version #{ucdata.version}\n\n"
    yield "module URI"
    yield "  module IDNA"
    yield "    # IDNA Mapping Table from UTS46."

    yield "    UTS46_DATA = ["
    ranges { |l| yield "      #{l}," }
    yield "    ].freeze"
    yield "  end"
    yield "end"
  end

  private

  def ranges
    last = [nil, nil]
    ucdata.codepoints do |cp|
      fields = cp.uts46_data
      next unless fields

      status, mapping = UTS46_STATUSES[fields[0]]

      if mapping
        mapping = fields[1].split.map { |x| x.to_i(16) }.pack("U*")
        mapping = mapping.gsub("\\", "\\\\\\").gsub('"', '\\\\"')
      else
        mapping = nil
      end
      next if cp.value > 255 && last == [status, mapping]

      last = [status, mapping]
      if mapping
        yield "[0x#{cp.value.to_s(16).upcase}, \"#{status}\", \"#{mapping}\"]"
      else
        yield "[0x#{cp.value.to_s(16).upcase}, \"#{status}\"]"
      end
    end
  end
end
